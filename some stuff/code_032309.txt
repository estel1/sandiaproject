
#include "msp430x16x.h"

void Timer_Wait(unsigned short cycles);
void Timer_Waitsecond(unsigned short delay);
void TimerSetup(void);
void UartInterruptSetup(void);
void ADCInterruptSetup(void);
void SPIsetup(void);
void eraseFlash(void);

static int wantedSamples = 200;
static int capturedSamples =0;
int SampleInfo;
static char SLV_Data = 0x00;
static int stillGPSData = 1;
static double sampleSize = 128000;
static int totalSent =0; 



int main( void )
{
// Stop watchdog timer to prevent time out reset
  WDTCTL = WDTPW + WDTHOLD;
  TimerSetup();
  ADCInterruptSetup();
  while(capturedSamples< wantedSamples){}
  UartInterruptSetup();
  while(stillGPSData)  {
     TXBUF1 = SLV_Data;
     LPM1;
  
  }
 // erase flash
 eraseFlash();
  return 0;
  
}
 
  // This timer function waits as long the parameter  
  void Timer_Wait(unsigned short cycles){
    TACCTL0 =CM1;
    TAR=0;
  unsigned short startTime = TAR;
  TACTL = TASSEL_2 + MC_1 + ID_3;    // SMCLK, Mode is Counting up, ID_3 (3 is 8)
  while((TAR-startTime) <= cycles){
  }

 
}
void Timer_Waitsecond(unsigned short delay){
  unsigned short i;
    for(i=0; i<delay; i++){
      Timer_Wait(6250); } // waits 1/20 sec
}

void TimerSetup(void)
{
 TACCR0 = 6251;
 
}
void UartInterruptSetup(void)
{
  P3SEL = 0x30;                             // P3.3,4 = USART0 TXD/RXD

  ME1 |= UTXE0 + URXE0;                     // Enabled USART0 TXD/RXD
  UCTL0 |= CHAR;                            // 8-bit character, SWRST=1
  UTCTL0 |= SSEL1;                          // UCLK = SMCLK
  UBR00 = 0x03;                             // 9600 from 1Mhz
  UBR10 = 0x00;                             //
  UMCTL0 = 0x4A;                            // Modulation
  UCTL0 &= ~SWRST;                          // Initialize USART state machine
  IE1 |= URXIE0 + UTXIE0;                   // Enable USART0 RX/TX interrupt
  IFG1 &= ~UTXIFG0;                         // Clear inital flag on POR
   _BIS_SR(LPM1_bits + GIE);                 // Enter LPM1 w/ interrupt
}

void ADCInterruptSetup(void)
{
  
  P6SEL = 0x0F;                             // Enable A/D channel inputs
  ADC12CTL0 = ADC12ON+MSC;           

  ADC12CTL1 = SHP+CONSEQ_3;                 // Use sampling timer, repeated sequence
  ADC12MCTL0 = INCH_0;                      //  channel = A0 x
  ADC12MCTL1 = INCH_1;                      //  channel = A1 y 
  ADC12MCTL2 = INCH_2;                      //  channel = A2 z
  ADC12IE = 0x08;                           // Enable ADC12IFG.3 interrupt enable
  ADC12CTL0 |= ENC;                         // Enable conversions
  ADC12CTL0 |= ADC12SC;                     // Start conversion
  _BIS_SR(LPM0_bits + GIE);                 // Enter LPM0, Enable interrupts
  
 }
void SPIsetup(void)

{
  
  P3SEL = 0x0E;                             // Setup P3 for SPI mode
  U1CTL = CHAR + SYNC + SWRST+ MM;          // 8-bit, SPI, Master
  U1TCTL = CKPL + STC;                      // Polarity, UCLK, 3-wire
  ME2 = USPIE1;                             // Module enable
  U0CTL &= ~SWRST;                          // SPI enable
  IE2 |= URXIE1;                            // Recieve interrupt enable
  _EINT();                                  // Enable interrupts

  TXBUF1 = SLV_Data;                      // Ready TXBUF1 
  LPM1;                                   // Enter LPM1
   
}

void eraseFlash(void)
{
 // enable the write pin
  // do delete. 
}

#pragma vector=USART1RX_VECTOR
__interrupt void SPI1_rx (void)
{
  while ((IFG2 & UTXIFG1) == 0);            // USART1 TX buffer ready?
    SLV_Data = SLV_Data +1;                 // Increment incoming data mask
    TXBUF0 = U1RXBUF;
    SampleInfo = U1RXBUF;
   if (totalSent>sampleSize)                //provides an exit condition not complete
     stillGPSData=0;
   totalSent++;
  

}


// UART0 TX ISR
#pragma vector=USART0TX_VECTOR
__interrupt void usart0_tx (void)
{
    TXBUF0 = SampleInfo;         // transmit sampleInfo
}

// UART0 RX ISR
#pragma vector=USART0RX_VECTOR
__interrupt void usart0_rx (void)
{
  if (RXBUF0 == 'z')                        // did we get z
  {
    SPIsetup();
    
  }
}


#pragma vector=ADC12_VECTOR
__interrupt void ADC12ISR (void)
{
  Timer_Waitsecond(12000); // wait 10 minutes
  P4DIR = 0x30;  // set p4.2 and p4.1 out
  P4OUT = 0x01;
  Timer_Waitsecond(1);// wait Sige initialize time
  P4OUT = 0x01;  // set mux to point from Sige to mem
  Timer_Waitsecond(5);
  P4OUT = 0x00; // turn things off
  capturedSamples++;  // we have one more sample
}
  
 



